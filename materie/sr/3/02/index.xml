<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Assembly on Michele Schimd</title><link>https://profschimd.github.io/materie/sr/3/02/</link><description>Recent content in Assembly on Michele Schimd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://profschimd.github.io/materie/sr/3/02/index.xml" rel="self" type="application/rss+xml"/><item><title>Load and Store</title><link>https://profschimd.github.io/materie/sr/3/02/load-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/3/02/load-store/</guid><description>Leggere e scrivere la RAM Un programma non potrebbe fare molto senza utilizzare la memoria RAM per tanti motivi:
le istruzioni sono nella RAM; i dati sono nella RAM; i risultati vengono scritti nella RAM; &amp;hellip; Serve quindi un modo per poter leggere e scrivere dalla RAM. Le istruzioni assembly che fanno queste operazioni sono
LOAD (LD) legge dati dalla RAM e li scrivi nei registri STORE (ST) scrive dati nella RAM prendendoli dai registri Architetture Load-Store Alcune architetture di processori vengono dette Load-Store perch√© non permettono solo questo tipo di operazioni con la RAM.</description></item></channel></rss>