<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michele Schimd</title><link>https://profschimd.github.io/</link><description>Recent content on Michele Schimd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://profschimd.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Informazione e dati</title><link>https://profschimd.github.io/materie/inf/5/01-gestione-dati/01-informazione-dati/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/5/01-gestione-dati/01-informazione-dati/</guid><description>In questa lezione capiremo cosa sono i dati e cosa si intende per informazione. Questo aspetto va necessariamente approfondito per gestire al meglio i dati in modo da mantenere l&amp;rsquo;informazione che è di interesse.</description></item><item><title>Introduzione ai Design Pattern</title><link>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/00-intro-design-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/00-intro-design-pattern/</guid><description>In questa lezione si presentano i design pattern che vengono affrontati in questo modulo. Pur non rappresentando una lista esaustiva, i pattern qui menzionati (trattati in dettaglio nelle seguenti lezioni) coprono un significativo numero di situazioni di progettazione software.</description></item><item><title>Programmare</title><link>https://profschimd.github.io/materie/inf/3/01-programmazione/00-programmare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/3/01-programmazione/00-programmare/</guid><description>Cosa vuol dire programmare One of the hardest things to learn in programming is not the syntax you need to learn, but how to apply it to solve real world problems. You need to start thinking like a programmer — this generally involves looking at descriptions of what your program needs to do, working out what code features are needed to achieve those things, and how to make them work together.</description></item><item><title>Sistema di elaborazione</title><link>https://profschimd.github.io/materie/sr/3/01/sistema_elaborazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/3/01/sistema_elaborazione/</guid><description>I sistemi di elaborazione sono quei dispositivi che sono in grado di elaborare dati. Spesso questi possono essere programmati per fare delle specifiche elaborazioni.</description></item><item><title>Rappresentazione dei dati</title><link>https://profschimd.github.io/materie/inf/5/01-gestione-dati/02-rappresentazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/5/01-gestione-dati/02-rappresentazione/</guid><description>Rappresentare l&amp;rsquo;informazione Nella lezione Informazione e Dati viene brevemente trattata la problematica di rappresentare vari tipi di informazione (immagini, suoni, video, &amp;hellip;) in bit di modo che essa possa essere manipolata dai calcolatori moderni.
Tipi e domini Rappresentazione intensionale ed estensionale Vincoli</description></item><item><title>Manipolare i dati</title><link>https://profschimd.github.io/materie/inf/5/01-gestione-dati/03-manipolazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/5/01-gestione-dati/03-manipolazione/</guid><description>Manipolare i dati Inserzioni Modifica Cancellazione Replicazione e Consistenza</description></item><item><title>Basi del linguaggio Dart</title><link>https://profschimd.github.io/materie/tpsit/5/01-dart/01-basi-dart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/01-dart/01-basi-dart/</guid><description>Questa lezione introduce i principali costrutti del linguaggio Dart con particolare riferimento agli aspetti che differiscono in maniera sostanziale dagli altri linguaggi quali Java, C, Python, &amp;hellip;</description></item><item><title>Concetti base programmazione ad oggetti</title><link>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/01-oop-concetti-base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/01-oop-concetti-base/</guid><description>Riepilogo dei più importanti concetti della programmazione ad oggetti.</description></item><item><title>Cosa vuol dire progettare una rete</title><link>https://profschimd.github.io/materie/sr/5/05-progettazione/01-progettazione-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/05-progettazione/01-progettazione-intro/</guid><description>Prima di cimentarsi con la progettazione di una rete, è necessario capire cosa significa progettare una rete. Questa lezione fornisce una breve introduzione e panoramica dei problemi relativi alla progettazioni di reti.</description></item><item><title>Creational Patterns</title><link>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/01-creational-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/01-creational-patterns/</guid><description>I creational patterns sono design patterns che vengono utilizzati per la creazione (factoring) di istanze tipicamente per astrarre l&amp;rsquo;accesso al costruttore.</description></item><item><title>Dart async e await</title><link>https://profschimd.github.io/materie/tpsit/5/02-asynch/01-dart-async-await/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/02-asynch/01-dart-async-await/</guid><description>Questa lezione introduce i costrutti async e await presenti in Dart per la programmazione asincrona.</description></item><item><title>Diagramma della classi UML</title><link>https://profschimd.github.io/materie/tpsit/4/03-uml/01-uml-classi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/03-uml/01-uml-classi/</guid><description>Cose&amp;rsquo;è il diagramma delle classi Il diagramma delle classi UML serve a descrivere le classi di un progetto e la relazione tra di esse (es. ereditarietà). Il diagramma delle classi risulta molto comodo quando il progetto contiene molte (10 o più) classi per cui il codice è costituito da centinaia di righe. In questo caso avere un diagramma delle classi. Il diagramma delle classi contiene tutte le informazioni riguardanti gli attributi (public, private e protected) e tutti i metodi (public private e protected) di una classe.</description></item><item><title>Hello Flutter!</title><link>https://profschimd.github.io/materie/tpsit/5/04-flutter/01-hello-flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/04-flutter/01-hello-flutter/</guid><description>Questa presentazione presenta il classico &amp;lsquo;Hello World!&amp;rsquo; in Flutter</description></item><item><title>HTML</title><link>https://profschimd.github.io/materie/inf/4/06-html-css/01-html/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/06-html-css/01-html/</guid><description>HTML (HyperText Markup Language) è diventato uno standard per la definizione di documenti con contenuti multimediali. L&amp;rsquo;attuale versione HTML5, insieme a CSS e Javascript, permette la realizzazione di vere e proprie web application in esecuzione sul browser.</description></item><item><title>Istruzioni</title><link>https://profschimd.github.io/materie/inf/3/01-programmazione/01-istruzioni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/3/01-programmazione/01-istruzioni/</guid><description/></item><item><title>La comunicazione</title><link>https://profschimd.github.io/materie/sr/4/01-base-reti/01-comunicazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/01-base-reti/01-comunicazione/</guid><description>Per capire bene come funziona una rete, bisogna prima capire a cosa serve una rete.
Nell&amp;rsquo;esempio di comunicazione rappresentato nella figura di sinistra, ci sono due persone che vogliono scambiarsi dell&amp;rsquo;informazione. Alice vuole che Bob le mandi l&amp;rsquo;ultimo versione del documento su cui lui sta lavorando. Bob è in smart working per la pandemia e manderà ad Alice una copia elettronica del documento richiesto. Notiamo che quando Alice chiede via email il documento a Bob, Alice spedisce e Bob riceve.</description></item><item><title>Mezzi fisici</title><link>https://profschimd.github.io/materie/sr/4/02-physical/mezzi-fisici/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/02-physical/mezzi-fisici/</guid><description>Descrizione dei principali mezzi fisici utilizzati oggi e confronto tra di essi.</description></item><item><title>Operazione di manipolazione dei dati</title><link>https://profschimd.github.io/materie/inf/4/02-strutture-dati/01-operazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/02-strutture-dati/01-operazione/</guid><description>Le strutture dati sono dei modi (strutture) di organizzare l&amp;rsquo;informazione (dati) all&amp;rsquo;interno della memoria di un calcolatore. Sappiamo che la memoria di lavoro della CPU (RAM e cache) è fondamentalmente un array, cioè una struttura di memorizzazione lineare.
Nella pratica l&amp;rsquo;elaborazione dell&amp;rsquo;informazione richiede metodi più sofisticati per la gestione dei dati; le strutture dati permettono una gestione efficiente dell&amp;rsquo;informazione sulla memoria.
Operazione di manipolazione Esistono tre tipologie di operazioni sulle stretture dati</description></item><item><title>Queue e Stack</title><link>https://profschimd.github.io/materie/inf/4/03-array-liste/01-queue-and-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/03-array-liste/01-queue-and-stack/</guid><description>In questa lezione si affrontano le strutture dati queue (coda) e stack (pila) indicando il loro comportamento e le operazioni che sono normalmente disponibile per queste strutture.</description></item><item><title>Random Access Memory (RAM)</title><link>https://profschimd.github.io/materie/sr/3/01/ram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/3/01/ram/</guid><description>La RAM è una della memoria di un sistema di elaborazione, il suo funzionamento è strettamente collegato al funzionamento della CPU e per questo va compreso a fondo.</description></item><item><title>Requisiti di sicurezza</title><link>https://profschimd.github.io/materie/sr/5/02-sicurezza/01-ciaa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/02-sicurezza/01-ciaa/</guid><description>Materiale Dispensa su sicurezza (pdf)</description></item><item><title>Ruoli del livello di collegamento</title><link>https://profschimd.github.io/materie/sr/4/03-datalink/collegamento/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/03-datalink/collegamento/</guid><description>Ruolo del livello di collegamento Il livello di collegamento** (data link) rappresenta il secondo livello dell&amp;rsquo;architettura ISO/OSI mentre è parte del livello di &amp;ldquo;Accesso alla Rete&amp;rdquo; nell&amp;rsquo;architettura TCP/IP di Internet. Trovandosi tra il livello di accesso al mezzo fisico ed il livello di rete, il ruolo del livello data link è di fornire un&amp;rsquo;astrazione del mezzo fisico utilizzato e della topologia della rete. In pratica i protocolli del livello di rete (ad esempio IPv4 e IPv6) devono essere &amp;ldquo;indifferenti&amp;rdquo; al tipo di mezzo fisico (es.</description></item><item><title>Sincronizzazione</title><link>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/sincronizzazione/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/sincronizzazione/</guid><description>Cos&amp;rsquo;è la sincronizzazione Vari tipi di problemi hanno soluzioni le cui operazioni devono essere fatte in un ordine ben preciso. Ad esempio, quando si cucina una pizza, si deve aspettare che il forno sia caldo prima che si possa inserire la pizza cruda. Inoltre, gli ingredienti devono essere messi prima di infornare la pizza altrimenti questi non si cuociono.
Anche nei problemi informatici è spesso necessario che le operazioni si svolgano in una sequenza ben precisa, questa sequenza di operazione prende il nome di algoritmo.</description></item><item><title>Software development</title><link>https://profschimd.github.io/materie/inf/4/21-development-clil/01-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/21-development-clil/01-development/</guid><description>Development is a generic term including many aspects of software production, in this lecture, wer are going to discuss some of these aspects</description></item><item><title>Abstract Data Type (ADT)</title><link>https://profschimd.github.io/materie/inf/4/02-strutture-dati/02-adt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/02-strutture-dati/02-adt/</guid><description>Questa lezione introduce e spiega il concetto di abstract data type (tipo dato astratto) fornendo esempi anche pratici nel linguaggio Java.</description></item><item><title>Architettura a strati per le reti</title><link>https://profschimd.github.io/materie/sr/4/01-base-reti/02-architettura-rete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/01-base-reti/02-architettura-rete/</guid><description>Modelli a strati Una rete come Internet è un artificio umano estremamente complesso. Si stima che ci siano più di 20 miliardi di dispositivi connessi alla rete (quanti dei vostri dispositivi - PC, smartphone, PS5, &amp;hellip; - sono connessi ad Internet?).
Rifletti Quanti e quali dispositivi sono connessi? Scrivi una risposta e solo dopo clicca qui e rifletti sulla tua risposta. Aggiungeresti qualcosa alla lista dei tuoi dispositivi connessi?
Per gestire un sistema così complesso le reti moderne come Internet sono costruite basandosi su architetture a strati (layered architecture).</description></item><item><title>Campi e metodi di un oggetto</title><link>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/02-campi-metodi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/02-campi-metodi/</guid><description>I mattoni costituenti delle classi sono i campi (le variabili) e i metodi (le funzioni).</description></item><item><title>Central Processing Unit (CPU)</title><link>https://profschimd.github.io/materie/sr/3/01/cpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/3/01/cpu/</guid><description>La CPU è il centro operativo di un sistema di elaborazione dati, essa permette di fare operazioni semplici, ma in modo veloce. Capire come funziona la CPU è fondamentale per scrivere programmi che siano efficienti.</description></item><item><title>Codifica</title><link>https://profschimd.github.io/materie/sr/4/02-physical/codifica/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/02-physical/codifica/</guid><description>Avendo stabilito il mezzo di comunicazione è necessario che i dispositivi di trasmissione e ricezione si &amp;ldquo;accordino&amp;rdquo; su come misurare l&amp;rsquo;informazione (i bit) sul mezzo di trasmissione. Ad esempio, se sul cavo di rame si pattuisce che una tensione di +5V indichi un bit 1 mentre una tensione di 0V indichi un bit 0, rimane il problema di decidere &amp;ldquo;quando&amp;rdquo; misurare la tensione per rilevare i bit.
Ad esempio consideriamo il seguente segnale dati.</description></item><item><title>CSS</title><link>https://profschimd.github.io/materie/inf/4/06-html-css/02-css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/06-html-css/02-css/</guid><description>I CSS (Cascading Style Sheet) contengono lo stile da applicare ai vari elementi di una pagina HTML. Questa lezione introduce i concetti base sui CSS (selettori, regole, proprietà, &amp;hellip;).</description></item><item><title>Dart stream</title><link>https://profschimd.github.io/materie/tpsit/5/02-asynch/02-stream-dart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/02-asynch/02-stream-dart/</guid><description>In questa lezione affrontiamo il concetto di stream in Dart. Gli stream sono dei generatori asincroni di eventi che vengono utilizzati in molte parti di un&amp;rsquo;applicazione Dart e Flutter.</description></item><item><title>Firewall</title><link>https://profschimd.github.io/materie/sr/5/02-sicurezza/02-firewall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/02-sicurezza/02-firewall/</guid><description>Il firewall è un componente fondamentale per la sicurezza in una rete, in questa lezione si discute il funzionamento di un firewall e le principali tipologie di firewall</description></item><item><title>Le classi nel linguaggio Dart</title><link>https://profschimd.github.io/materie/tpsit/5/01-dart/02-classi-dart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/01-dart/02-classi-dart/</guid><description>Questa lezione introduce la sintassi per usare e creare classi in Dart. Particolare spazio è dedicato ai costruttore che in Dart hanno una forma ed una sintassi non usuale.</description></item><item><title>Liste</title><link>https://profschimd.github.io/materie/inf/4/03-array-liste/02-liste/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/03-array-liste/02-liste/</guid><description>In questa lezione si affrontano le strutture dati di tipo lista sia singolarmente che doppiamente concatenate.</description></item><item><title>Programming languages</title><link>https://profschimd.github.io/materie/inf/4/21-development-clil/02-languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/21-development-clil/02-languages/</guid><description>The programming language is an important aspect of software development, today there are thousand of languages each with pros and cons. This lecture discusses the most popular programming languages as well as their usage in software development.</description></item><item><title>Stateful widget</title><link>https://profschimd.github.io/materie/tpsit/5/04-flutter/02-stateful-widget/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/04-flutter/02-stateful-widget/</guid><description>In questa lezione viene affrontato il tema degli stateful widget vale a dire quei widget che memorizzano uno stato dal quale dipende il rendering del widget stesso.</description></item><item><title>Structural Patterns</title><link>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/02-structural-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/02-structural-patterns/</guid><description>Adapter Il pattern Adapter prevede che una classe o interfaccia venga utilizzata per adattare due interfacce &amp;ldquo;incompatibili&amp;rdquo;. Un caso molto comune di utilizzo dell&amp;rsquo;adapter è quando si decide (o si deve) utilizzare una classe di &amp;ldquo;libreria&amp;rdquo; la cui interfaccia non è compatibile con il codice già scritto.
Supponiamo che un software gestionale acceda ai dati mediante un database e che per fare questo usi una libreria con i seguenti metodi</description></item><item><title>Variabili</title><link>https://profschimd.github.io/materie/inf/3/01-programmazione/02-variabili/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/3/01-programmazione/02-variabili/</guid><description/></item><item><title>Incapsulamento</title><link>https://profschimd.github.io/materie/sr/4/01-base-reti/02b-incapsulamento/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/01-base-reti/02b-incapsulamento/</guid><description>Una delle operazione più importanti nelle reti è quella di incapsulamento, questa operazione è l&amp;rsquo;analogo dell&amp;rsquo;imbustare nel caso della posta tradizionale. Quando si deve spedire una lettera o un documento, normalmente si inserisce tale documento in una busta la quale viene poi chiusa e sulla quale vengono scritti le informazioni utili per la consegna della busta. Queste informazioni non sono il contenuto del messaggio (cioè il documento da spedire), ma sono fondamentali per la corretta consegna della busta.</description></item><item><title>Behavioral Patterns</title><link>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/03-behavioral-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/04-design-patterns/03-behavioral-patterns/</guid><description>Iterator L&amp;rsquo;iterator pattern prevede che si realizzi un meccanismo per accedere, in modo sequenziale, agli elementi di una collezione, senza che i dettagli circ la memorizzazione di tali elementi siano noti (o debbano servire per l&amp;rsquo;accesso).
Ad oggi un meccanismo basato su iterator è presente in pressoché tutti i linguaggi, spesso realizzati da funzioni o classi di libreria. Prima di passare all&amp;rsquo;implementazione di un iterator, vediamo come utilizzarne uno già presente nella libreria Java.</description></item><item><title>Complessità computazionale</title><link>https://profschimd.github.io/materie/inf/4/02-strutture-dati/03-complessita/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/02-strutture-dati/03-complessita/</guid><description>Questa lezione affranta uno dei temi più importanti dell&amp;rsquo;informatica teorica, quello della complessità computazionale. Nello specifico si spiega il concetto di tempo di esecuzione e di complessità asintotica.</description></item><item><title>Condizioni e salti</title><link>https://profschimd.github.io/materie/inf/3/01-programmazione/03-condizioni-salti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/3/01-programmazione/03-condizioni-salti/</guid><description>Condizioni: if-then-else Attenzione al codice replicato Le condizioni if sono indispensabili per eseguire codice diverso in base a delle condizioni quale, ad esempio, il valore di una variabile. Perciò si può scrivere a schermo una frase al singolare
È rimasto un solo posto, affrettati a prenotare! in caso in cui, ad esempio su un volo, sia rimasto l&amp;rsquo;ultimo posto disponibile mentre si usano frasi diverse in situazioni diverse.
Un bravo programmatore deve identificare tutte e sole quelle istruzioni che cambiano sulla base della condizione.</description></item><item><title>Gerarchie di classi</title><link>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/03-gerarchie-di-classi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/03-gerarchie-di-classi/</guid><description>Le gerarchie di classi permettono di creare classi che possono cambiare ed adattare il loro comportamento secondo le esigenze.</description></item><item><title>Larghezza di banda e latenza</title><link>https://profschimd.github.io/materie/sr/4/02-physical/banda-latenza/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/02-physical/banda-latenza/</guid><description>I mezzi fisici si caratterizzano, tra le altre cose, anche per la velocità con cui permettono il trasferimento dei dati. Il termine velocità come per la auto non ha molto senso nella trasmissione dati poiché conta anche la quantità di informazione (bit) trasferita.
Due caratteristiche importanti dei mezzi fisici sono la larghezza di banda (bandwidth) e la latenza (latency). Nella analogia spesso usata di un tubo d&amp;rsquo;acqua, banda e latenza hanno la seguente interpretazione.</description></item><item><title>Layout mediante CSS</title><link>https://profschimd.github.io/materie/inf/4/06-html-css/03-css-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/06-html-css/03-css-layout/</guid><description>Uno degli usi importanti di CSS è definire il layout (disposizione degli elementi) in una pagina HTML. Questa lezione present ai principali metodi di layout mediante CSS.</description></item><item><title>Progettazione fisica di una rete</title><link>https://profschimd.github.io/materie/sr/5/05-progettazione/03-progettazione-fisica/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/05-progettazione/03-progettazione-fisica/</guid><description>Una volta completata l&amp;rsquo;analisi dei requisiti, si procede alla progettazione fisica della rete nella quale si definiscono i dispositivi, la loro collocazione fisica e i collegamenti.</description></item><item><title>Protocolli di rete</title><link>https://profschimd.github.io/materie/sr/4/01-base-reti/protocolli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/01-base-reti/protocolli/</guid><description>Definizione: Protocollo Un protocollo di rete è un insieme di regole che determinano il modo in cui avviene una comunicazione tra due software. I protocolli sono usati da software che si posizionano allo stesso livello del modello di riferimento.
La definizione appena data presenta diversi aspetti da capire.
Insieme di regole proprio come nella comunicazione tra persone, è necessario che si stabiliscano delle regole perché questa comunicazione possa avvenire. Le regole si stabiliscono per garantire diversi requisiti due persone devono in una lingua comprensibile ad entrambi; se &amp;ldquo;distanti&amp;rdquo; le due persone devono utilizzare opportuni mezzi; due persone non dovrebbero parlare contemporaneamente; se la conversazione è riservata e remota, bisogna essere sicuri dell&amp;rsquo;identità interlocutore Comunicazione come visto sopra, lo scopo è, solitamente quello di effettuare una comunicazione, vale a dire uno scambio di informazioni.</description></item><item><title>Sezione critica</title><link>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/sezione_critica/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/sezione_critica/</guid><description>Il problema della sezione critica Un sistema multithread può presentare problemi di sincronizzazione dovuti all&amp;rsquo;utilizzo da parte di due o più thread della stessa risorsa. Questa risorsa può essere un file e perfino una variabile (ricordiamo che i thread di un processo lavorano su uno spazio di memoria condiviso, quindi possono usare variabili condivise). Un esempio di questi problemi di sincronizzazione si ha in caso di race condition (come descritto qui).</description></item><item><title>Utilizzo base di Navigator</title><link>https://profschimd.github.io/materie/tpsit/5/04-flutter/03-navigator-basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/04-flutter/03-navigator-basic/</guid><description>In questa lezione viene introdotta la classe Navigator per la creazione di app multi-pagina.</description></item><item><title>Virtual Private Network (VPN)</title><link>https://profschimd.github.io/materie/sr/5/02-sicurezza/03-vpn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/02-sicurezza/03-vpn/</guid><description>Cos&amp;rsquo;è una VPN Con la pandemia da SARS-Cov-2, ci si è resi conto dell&amp;rsquo;importanza dello smart working (o lavoro agile), molte istituzioni e aziende hanno potuto lavorare nonostante il lockdown. Uno dei problemi dello smart working è il collegamento attraverso una rete diversa da quella aziendale. Questo rende impossibile l&amp;rsquo;accesso alle risorse di rete che possono essere utilizzate solo nella intranet, cioè solo se connessi alla rete aziendale.
La soluzione è quella di creare una rete aziendale privata, tuttavia il problema diventerebbe avere un&amp;rsquo;infrastruttura di rete (cavi e/o access point wireless) priva; che, a meno di situazioni geograficamente concentrate (es.</description></item><item><title>Clock</title><link>https://profschimd.github.io/materie/sr/3/01/clock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/3/01/clock/</guid><description>Il clock è un segnale periodico utilizzato per temporizzare dei circuiti elettronici. Ricordiamo che un segnale è una quantità fisica che varia nel tempo. Solitamente nei circuiti elettronici il clock viene realizzato mediante una tensione di corrente che varia nel tempo. Un segnale periodico è un segnale che si ripete uguale indefinitamente. La parte del segnale di clock che viene ripetuta si chiama ciclo di clock, la durata della parte ripetuta si chiama periodo.</description></item><item><title>Interfacce e API</title><link>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/04-interfacce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/01-ripasso-oop/04-interfacce/</guid><description>Le interfacce&amp;hellip;</description></item><item><title>Network Address Translation (NAT)</title><link>https://profschimd.github.io/materie/sr/5/02-sicurezza/04-nat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/02-sicurezza/04-nat/</guid><description>Cos&amp;rsquo;è un NAT NAT è una sigla che significa Network Address Translation, questa stessa sigla indica cosa fa un dispositivo NAT: traduce indirizzi. Più precisamente, si dovrebbe dire che un NAT sostituisce indirizzi in quanto esso sostituisce, all&amp;rsquo;interno di un pacchetto IP (datagramma), un indirizzo con un altro.
Utilizzi del NAT Ci sono due principali utilizzi dei dispositivi NAT uno per mascherare la topologia interna della rete e l&amp;rsquo;altro per permettere a più dispositivi di condividere un unico indirizzo IP pubblico (ad esempio, nelle reti domestiche).</description></item><item><title>Socket e multi-threading</title><link>https://profschimd.github.io/materie/tpsit/4/05-multi-threading/multi-thread-socket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/05-multi-threading/multi-thread-socket/</guid><description>Un utilizzo frequente dei thread è in combinazione con i socket. Si pensi ad un Web Server che riceve migliaia o più di richieste di connessioni in contemporanea. Come è possibile gestire tutte queste richieste in modo veloce?
Una possibilità è che il server utilizzi più thread per gestire le varie connessioni. Bisogna però stare attenti che l&amp;rsquo;utilizzo di troppi thread può sovraccaricare il server ottenendo l&amp;rsquo;effetto opposto a quello desiderato.</description></item><item><title>Topologia fisica di una rete</title><link>https://profschimd.github.io/materie/sr/4/02-physical/topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/02-physical/topology/</guid><description>Il modo in cui i dispositivi di una rete sono collegati tra loro viene detto topologia della rete.</description></item><item><title>Programmazione asincrona</title><link>https://profschimd.github.io/materie/tpsit/4/05-multi-threading/programmazione_asincrona/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/05-multi-threading/programmazione_asincrona/</guid><description>Programmazione sequenziale Normalmente siamo abituati a pensare ad un programma come ad una sequenza di istruzione, questo è in effetti quello che accade all&amp;rsquo;interno di un core della CPU che esegue continuamente il ciclo di fetch-and-execute. Per questo motivo si parla anche di programmazione sequenziale nel qual caso il compito del programmatore è trovare la giusta sequenza di istruzione (siano esse istruzioni Java, C++, assembly, &amp;hellip;).
Tuttavia, se si pensa a come oggi usiamo i nostri dispositivi (smartphone, laptop, PC, &amp;hellip;), ci si accorge subito che non si tratta di un un &amp;ldquo;uso sequenziale&amp;rdquo;.</description></item><item><title>Mutex, Semafori e Monitor</title><link>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/mutex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/mutex/</guid><description>Mutex Il concetto di Mutex (Mutual Exclusive) viene usato per indicare una qualche risorsa che può essere utilizzata da un solo thread o processo per volta
Osserva Si dice quindi che l&amp;rsquo;uso da parte un thread esclude l&amp;rsquo;uso da tutti gli altri da cui la dicitura mutua esclusione.
In pratica, un mutex è una variabile bool, quindi che può assumere solo i valor true e false. Quando la variabile è true il mutex è stato acquisito da un qualche thread ed è quindi locked.</description></item><item><title>Deadlock</title><link>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/deadlock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/02-sincronizzazione/deadlock/</guid><description>La sincronizzazione è una tecnica che permette di fissare l&amp;rsquo;ordine di esecuzione di thread. Con la sincronizzazione è possibile, quindi, imporre delle regole del tipo il thread A deve finire prima del thread B oppure il thread C deve partire quando i thread D, E ed F sono terminati. Di conseguenza le tecniche di sincronizzazione sono molto utili e vengono spesso usate nella programmazione concorrente. Tuttavia l&amp;rsquo;utilizzo della sincronizzazione può avere anche effetti negativi, a volte &amp;ldquo;gravi&amp;rdquo;, come quello del deadlock che discutiamo qui sotto.</description></item><item><title>Alberi</title><link>https://profschimd.github.io/materie/inf/4/04-grafi-alberi/01-alberi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/04-grafi-alberi/01-alberi/</guid><description>Le strutture dati ad albero rappresentano un valido strumento per rappresentare informazione gerarchica. Gli alberi sono usati spesso per operazioni di ricerca in quanto permettono di strutturare l&amp;rsquo;informazione in modo da agevolare la ricerca.</description></item><item><title>Basi di Javascript</title><link>https://profschimd.github.io/materie/inf/4/07-javascript/01-basi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/07-javascript/01-basi/</guid><description>In questa lezione presentiamo le basi del linguaggio Javascript. In particolare si discute: variabili e tipi, gestione del flusso.</description></item><item><title>Caratteristiche del livello applicativo</title><link>https://profschimd.github.io/materie/sr/5/01-application/livello-applicativo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/livello-applicativo/</guid><description>In questa lezione vediamo le principali caratteristiche del livello mettendolo in relazione con il sottostante livello di trasporto.</description></item><item><title>Concetti base sui Web service</title><link>https://profschimd.github.io/materie/tpsit/5/05-web-service/01-web-service-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/05-web-service/01-web-service-intro/</guid><description>Introduzione ai Web Service Un Web Service è un metodo di comunicazione tra applicazioni distribuite su diverse piattaforme e sistemi operativi tramite il protocollo HTTP (Hypertext Transfer Protocol). Questo metodo è stato introdotto per superare le limitazioni dei tradizionali metodi di comunicazione, come i file di scambio e i messaggi in formato testo, che spesso non permettono una comunicazione efficiente e sicura tra applicazioni.
Definizione Un Web Service è un sistema software che permette a diverse applicazioni di comunicare tra loro e scambiarsi informazioni in rete, solitamente utilizzando protocolli standard, tipicamente HTTP, basati su XML o JSON.</description></item><item><title>Introduzione al testing</title><link>https://profschimd.github.io/materie/tpsit/4/06-testing/01-introduzione-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/06-testing/01-introduzione-testing/</guid><description>Questa lezione introduce i concetti base di testing i quali si possono applicare a tutti i linguaggi di programmazione.</description></item><item><title>Laboratorio: richiesta HTTP con async</title><link>https://profschimd.github.io/materie/tpsit/5/02-asynch/l01-async-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/02-asynch/l01-async-http/</guid><description>Questo laboratorio presenta l&amp;rsquo;utilizzo della libreria dart per http combinandolo con la programmazione async e await. Questo approccio è alla base della maggior parte delle app che scaricano contenuti in maniera asincrona.</description></item><item><title>Progetto e Gestione Progetto</title><link>https://profschimd.github.io/materie/gpoi/5/03/01-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/gpoi/5/03/01-project/</guid><description>Questa lezione tratta i concetti base del project management (in italiano gestione progetto) approfondendo il concetto di progetto, la differenza tra progetto e processo ed il concetto di gestione del progetto.
Consultando questa mappa concettuale si può vedere come il concetto di progetto sia definito e collegato ad altri concetti fondamentali. Le lezioni di questo modulo (di cui questa è la prima) cercano di spiegare gli aspetti più importanti mostrati nella mappa.</description></item><item><title>Laboratorio: gestire dati con plain-file</title><link>https://profschimd.github.io/materie/inf/5/01-gestione-dati/l01-file-dati/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/5/01-gestione-dati/l01-file-dati/</guid><description/></item><item><title>Laboratorio: livelli di rete e programmazione</title><link>https://profschimd.github.io/materie/sr/4/01-base-reti/lab01-program-livelli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/4/01-base-reti/lab01-program-livelli/</guid><description>Uno dei vantaggi dei vantaggi di un&amp;rsquo;architettura di rete stratificata è la modularità che ne deriva. Infatti, ogni livello può essere realizzato com un modulo a sé, l&amp;rsquo;importante è che si realizzino i corretti Service Access Point (SAP). Per comprendere meglio questo aspetto, in questo laboratorio si procede alla stesura di una piccola architettura di rete basata su due soli livelli. Negli esempi verrà utilizzato il linguaggio Python, ma è possibile, ma qualsiasi linguaggio ad alto livello può essere utilizzato, va tenuto in considerazione, tuttavia, che ogni linguaggio presenta nei modi specifici per realizzare alcuni concetti della programmazione (esempio: interfacce, classi astratte, protocolli, &amp;hellip;).</description></item><item><title>Array e Oggetti in Javascript</title><link>https://profschimd.github.io/materie/inf/4/07-javascript/02-array-oggetti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/07-javascript/02-array-oggetti/</guid><description>In questa lezione si presentano due tipi di dato molto utilizzati in Javascript gli array e gli object.</description></item><item><title>Domain Name System (DNS)</title><link>https://profschimd.github.io/materie/sr/5/01-application/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/dns/</guid><description>Per associare agli indirizzi IP dei nomi (esempio google.com) è necessario un apposito servizio che viene chiamato di risoluzione dei nomi. Questa lezione spiega brevemente il funzionamento di questo servizio mostrando il formato dei messaggi DNS.</description></item><item><title>Il concetto di grafo</title><link>https://profschimd.github.io/materie/inf/4/04-grafi-alberi/02-concetto-di-grafo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/04-grafi-alberi/02-concetto-di-grafo/</guid><description>In questa lezione vengono presentati i concetti base sui grafi e vengono esposte le principali tecniche per la loro rappresentazione utilizzando il linguaggio Java.</description></item><item><title>Implementazione di Web Service REST</title><link>https://profschimd.github.io/materie/tpsit/5/05-web-service/02-realizzazione-web-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/05-web-service/02-realizzazione-web-service/</guid><description>Definizione delle risorse Il primo passo nella creazione di un web service è la definizione dei contenuti, le risorse che il servizio fornirà ai suoi utenti. Questo aspetto caratterizza il web service, ad esempio un servizio per fornire testo sarà diverso da un servizio per fornire immagini o video.
Ricordiamo che lo scambio di risorse avviene, tipicamente, utilizzando formati standard quali XML e JSON. Inoltre per servizi REST, le risorse vengono identificate mediante URL.</description></item><item><title>Algoritmi su grafi</title><link>https://profschimd.github.io/materie/inf/4/04-grafi-alberi/03-algoritmi-su-grafi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/04-grafi-alberi/03-algoritmi-su-grafi/</guid><description>L&amp;rsquo;utilizzo dei grafi come strutture dati permette l&amp;rsquo;esecuzione di algoritmi altrimenti difficili, se non impossibili, da realizzare. Questa lezione presenta alcuni tra i più importanti algoritmi su grafi.</description></item><item><title>Canvas</title><link>https://profschimd.github.io/materie/inf/4/07-javascript/03-canvas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/07-javascript/03-canvas/</guid><description>L&amp;rsquo;elemento HTML5 &amp;lt;canvas&amp;gt; Attenzione A differenza di altri tag HTML5 (ad esempio &amp;lt;img&amp;gt;), il tag &amp;lt;canvas&amp;gt; deve sempre essere chiuso con il corrispondente &amp;lt;/canvas&amp;gt; anche se il contenuto del tag è vuoto.
Interazione di base Disegnare path Disegnare testo Disegnare immagini</description></item><item><title>Protocollo HTTP</title><link>https://profschimd.github.io/materie/sr/5/01-application/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/http/</guid><description>Il protocollo HTTP (HyperText Transfer Protocol) e la sua versione sicura HTTPS (HTTP Secure) sono tra i più importanti protocolli di Internet. Inizialmente sviluppato da Tim Berners-Lee al CERN, HTTP è stato ufficialmente definito nel 1996 (qui la versione del 1992)
Le versioni attualmente più diffuse sono:
HTTP/1.1: RFC 9112 HTTP/2: RFC 9113 HTTP/3: RFC 9114 Funzionamento Il protocollo HTTP è un protocollo basato sul paradigma client/server ed utilizza il protocollo TCP a livello di trasporto.</description></item><item><title>Sicurezza nei Web Service</title><link>https://profschimd.github.io/materie/tpsit/5/05-web-service/03-web-service-sicurezza/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/05-web-service/03-web-service-sicurezza/</guid><description>Questa lezione tratta la sicurezza nei web service affrontando il problema dell&amp;rsquo;autenticazione e delle minacce alla sicurezza di un web service.</description></item><item><title>Processi di Project Management</title><link>https://profschimd.github.io/materie/gpoi/5/03/03-processi-pm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/gpoi/5/03/03-processi-pm/</guid><description>Ogni progetto si svolge mediante l&amp;rsquo;attuazione di processi, sebbene ogni progetto sia per definizione unico, i vari processi che si svolgono nei vari progetti sono molto simili tra loro. Questa lezione ha l&amp;rsquo;obiettivo di presentare i processi di project management comuni ad ogni progetto.</description></item><item><title>Protocolli per la posta elettronica: SMTP, POP e IMAP</title><link>https://profschimd.github.io/materie/sr/5/01-application/email/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/email/</guid><description>Uno degli strumenti più usati è la posta elettronica (email). I protocolli SMTP, POP e IMAP che permettono l&amp;rsquo;utilizzo di questo servizio sono l&amp;rsquo;argomento di questa lezione</description></item><item><title>Protocollo FTP</title><link>https://profschimd.github.io/materie/sr/5/01-application/ftp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/ftp/</guid><description/></item><item><title>Altri protocolli di livello applicativo</title><link>https://profschimd.github.io/materie/sr/5/01-application/altri-protocolli-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/altri-protocolli-app/</guid><description>Telnet Dynamic Host Configuration Protocol (DHCP)</description></item><item><title>Laboratorio: Queue e Stack</title><link>https://profschimd.github.io/materie/inf/4/03-array-liste/l01-queue-and-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/03-array-liste/l01-queue-and-stack/</guid><description>In questo laboratorio, si procede all&amp;rsquo;implementazione in Java delle interfacce per queue (code) e stack (liste).</description></item><item><title>Laboratorio 1: Client REST</title><link>https://profschimd.github.io/materie/tpsit/5/05-web-service/l01-web-service-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/05-web-service/l01-web-service-client/</guid><description>Web service pubblici Random user REST Countries News API (necessita API Key) Lista di API</description></item><item><title>Laboratorio 1: Tic Tac Toe (Tris) con Canvas HTML5</title><link>https://profschimd.github.io/materie/inf/4/07-javascript/l01-tic-tac-toe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/inf/4/07-javascript/l01-tic-tac-toe/</guid><description>Descrizione del laboratorio In questo laboratorio verrà sviluppato il classico gioco Tic Tac Toe (in Italia noto con il nome Tris). Il gioco verrà sviluppato nella sua interezza, partendo dalla rappresentazione in memoria della scacchiera di gioco, fino alla realizzazione dei controlli necessari a renderlo pienamente funzionante. La parte più significativa del laboratorio è l&amp;rsquo;utilizzo dell&amp;rsquo;elemento &amp;lt;canvas&amp;gt; di HTML5 spiegato meglio nella lezione dedicata.
Il laboratorio è diviso in tre parti:</description></item><item><title>Laboratorio: Server su macchina virtuale</title><link>https://profschimd.github.io/materie/sr/5/01-application/l01-vm-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/5/01-application/l01-vm-server/</guid><description>In questo laboratorio si installeranno diversi server su macchina virtuale Linux.</description></item><item><title>Laboratorio 2: Server REST</title><link>https://profschimd.github.io/materie/tpsit/5/05-web-service/l02-web-service-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/05-web-service/l02-web-service-server/</guid><description>Web Service in Javascript con NodeJS Web Service in Python con Flask Web Service in Dart Un modo veloce per creare web service in Dart è utilizzando il pacchetto shelf che può essere incluso aggiungendolo al pubspec.yaml:
dev_dependencies: shelf: ^1.1.0 Una volta incluso shelf, per creare un web server sono sufficiente due semplici passi:
definire una funzione handler che riceve richieste ed elabora le risposte, avviare un&amp;rsquo;istanza del server agganciata all&amp;rsquo;handler creato.</description></item><item><title/><link>https://profschimd.github.io/materie/tpsit/5/05-web-service/l03-web-service-sicurezza/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/5/05-web-service/l03-web-service-sicurezza/</guid><description>Postman</description></item><item><title>3IC (AS 2021-2022)</title><link>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/3ic-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/3ic-2021-2022/</guid><description/></item><item><title>4IC (AS 2021-2022)</title><link>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/4ic-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/4ic-2021-2022/</guid><description/></item><item><title>4ID (AS 2021-2022)</title><link>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/4id-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/4id-2021-2022/</guid><description/></item><item><title>5IA (AS 2021-2022)</title><link>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/5ia-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/5ia-2021-2022/</guid><description/></item><item><title>5IC (AS 2021-2022)</title><link>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/5ic-2021-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/classi/anni-passati/classi-as-2021-2022/5ic-2021-2022/</guid><description/></item><item><title>About</title><link>https://profschimd.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/about/</guid><description>Il sito Questo sito contiene materiale didattico predisposto per gli alunni dell&amp;rsquo;ITIS Carlo Zuccante di Venezia-Mestre.
Il materiale prodotto, quindi, va utilizzato esclusivamente a scopi didattici e non rappresenta documentazione o guida ufficiale ad i tool, linguaggi ed in generale agli argomenti trattati.
Informazioni Ricevimento: Venerdì dalle 9:00 alle 9:55 (prenotarsi su Spaggiari) Link utili GitHub ProfSchimd Registro Elettronico Sito Ufficiale ITIS Carlo Zuccante Sito Orientamento ITIS Zuccante</description></item><item><title>Calcolatrice (5ID App Contest)</title><link>https://profschimd.github.io/classi/5id/app-contest-calc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/classi/5id/app-contest-calc/</guid><description>Ecco le migliori tre applicazioni &amp;ldquo;Calcolatrice&amp;rdquo; della classe 5ID (2022 - 2023)
Primo posto Nome: Calcolatrice
Sviluppatore: Fran4end
Download APK
Secondo posto Nome: Calcolatrice
Sviluppatore: NicolaZll
Descrizione:
Download APK
Terzo posto Nome: Calcolatrice
Sviluppatore: Antananarivo1288
Descrizione:
Download APK</description></item><item><title>Load and Store</title><link>https://profschimd.github.io/materie/sr/3/02/load-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/sr/3/02/load-store/</guid><description>Leggere e scrivere la RAM Un programma non potrebbe fare molto senza utilizzare la memoria RAM per tanti motivi:
le istruzioni sono nella RAM; i dati sono nella RAM; i risultati vengono scritti nella RAM; &amp;hellip; Serve quindi un modo per poter leggere e scrivere dalla RAM. Le istruzioni assembly che fanno queste operazioni sono
LOAD (LD) legge dati dalla RAM e li scrivi nei registri STORE (ST) scrive dati nella RAM prendendoli dai registri Architetture Load-Store Alcune architetture di processori vengono dette Load-Store perché non permettono solo questo tipo di operazioni con la RAM.</description></item><item><title>Processi e Thread</title><link>https://profschimd.github.io/materie/tpsit/4/01-processi-thread/processi-e-thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/tpsit/4/01-processi-thread/processi-e-thread/</guid><description>Processi e thread</description></item><item><title>Python quiz</title><link>https://profschimd.github.io/materie/python/02-primi-passi/quiz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://profschimd.github.io/materie/python/02-primi-passi/quiz/</guid><description/></item></channel></rss>